package de.ronny_h.aoc.year2017.day15

import io.kotest.core.spec.style.StringSpec
import io.kotest.data.forAll
import io.kotest.data.row
import io.kotest.matchers.shouldBe

class DuelingGeneratorsTest : StringSpec({

    "generators A and B" {
        val generatorA = Generator(65, 16807)
        val generatorB = Generator(8921, 48271)
        forAll(
            row(1092455, 430625591),
            row(1181022009, 1233683848),
            row(245556042, 1431495498),
            row(1744312007, 137874439),
            row(1352636452, 285222916),
        ) { a, b ->
            generatorA.next() shouldBe a
            generatorB.next() shouldBe b
        }
    }

    "part 1: The number of equal lowest 16 bit values in a sample of 40 million pairs" {
        val input = listOf(
            "Generator A starts with 65",
            "Generator B starts with 8921",
        )
        DuelingGenerators().part1(input) shouldBe 588
    }

    "generators A and B only providing multiples" {
        val generatorA = Generator(65, 16807, 4)
        val generatorB = Generator(8921, 48271, 8)
        forAll(
            row(1352636452, 1233683848),
            row(1992081072, 862516352),
            row(530830436, 1159784568),
            row(1980017072, 1616057672),
            row(740335192, 412269392),
        ) { a, b ->
            generatorA.next() shouldBe a
            generatorB.next() shouldBe b
        }
    }

    "part 2: The number of equal lowest 16 bit values generated by modified generators in a sample of 5 million pairs" {
        val input = listOf(
            "Generator A starts with 65",
            "Generator B starts with 8921",
        )
        DuelingGenerators().part2(input) shouldBe 309
    }
})
