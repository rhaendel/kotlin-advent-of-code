package de.ronny_h.aoc.year24.day22

import de.ronny_h.aoc.extensions.asList
import de.ronny_h.aoc.year24.day22.MonkeyMarket.Buyer
import io.kotest.core.spec.style.StringSpec
import io.kotest.matchers.shouldBe

class MonkeyMarketTest : StringSpec({
    val input1 = """
        1
        10
        100
        2024
    """.asList()
    val input2 = """
        1
        2
        3
        2024
    """.asList()

    val market = MonkeyMarket()

    "next secret number of 123" {
        market.nextSecretNumber(123) shouldBe 15887950
    }

    "next ten secret numbers of 123" {
        var secret = 123L
        buildList {
            repeat(10) {
                secret = market.nextSecretNumber(secret)
                add(secret)
            }
        } shouldBe listOf(
            15887950,
            16495136,
            527345,
            704524,
            1553684,
            12683156,
            11100544,
            12249484,
            7753432,
            5908254,
        )
    }

    "part 1: The sum of the 2000th secret number generated by each buyer" {
        market.part1(input1) shouldBe 37327623
    }

    "list the first 10 prices with a see of 123" {
        market.listPrices(123, 9) shouldBe listOf(3, 0, 6, 5, 4, 4, 6, 4, 4, 2)
    }

    "the changes of consecutive prices" {
        listOf(3, 0, 6, 5, 4, 4, 6, 4, 4, 2).changes() shouldBe listOf(-3, 6, -1, -1, 0, 2, -2, 0, -2)
    }

    "sumUpBananasForSequences() for the example buyer yields the right highest price" {
        val buyer = Buyer(
            prices =       listOf(3, 0, 6,  5,  4, 4, 6,  4, 4,  2),
            priceChanges = listOf(  -3, 6, -1, -1, 0, 2, -2, 0, -2))
        val entryWithHighestPrice = market
            .sumUpBananasForSequences(listOf(buyer))
            .maxBy { it.value }
        entryWithHighestPrice.key shouldBe listOf(-1, -1, 0, 2)
        entryWithHighestPrice.value shouldBe 6
    }

    "part 2: The most bananas one can get" {
        market.part2(input2) shouldBe 23
    }
})
